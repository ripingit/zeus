<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.chaoxuan.zeus.dao.FitTaskWorkerMapper">
	<resultMap id="BaseResultMap" type="org.chaoxuan.zeus.model.FitTaskWorker">
		<!-- @mbggenerated -->
		<id column="id" property="id" />
		<result column="quota_worker_version_id" property="quotaWorkerVersionId" />
		<result column="fit_task_id" property="fitTaskId" />
		<result column="unit_task_time" property="unitTaskTime" />
		<result column="cost" property="cost" />
	</resultMap>
	<sql id="Base_Column_List">
		<!-- @mbggenerated -->
		id, quota_worker_version_id, fit_task_id, unit_task_time, cost
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		<!-- @mbggenerated -->
		select
		<include refid="Base_Column_List" />
		from t_fit_task_worker
		where id = #{id}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		<!-- @mbggenerated -->
		delete from t_fit_task_worker
		where id = #{id}
	</delete>
	<insert id="insert" parameterType="org.chaoxuan.zeus.model.FitTaskWorker">
		<!-- @mbggenerated -->
		insert into t_fit_task_worker (id, quota_worker_version_id, fit_task_id,
		unit_task_time, cost)
		values (#{id}, #{quotaWorkerVersionId}, #{fitTaskId},
		#{unitTaskTime}, #{cost})
	</insert>
	<insert id="insertSelective" parameterType="org.chaoxuan.zeus.model.FitTaskWorker">
		<!-- @mbggenerated -->
		insert into t_fit_task_worker
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="quotaWorkerVersionId != null">
				quota_worker_version_id,
			</if>
			<if test="fitTaskId != null">
				fit_task_id,
			</if>
			<if test="unitTaskTime != null">
				unit_task_time,
			</if>
			<if test="cost != null">
				cost,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id},
			</if>
			<if test="quotaWorkerVersionId != null">
				#{quotaWorkerVersionId},
			</if>
			<if test="fitTaskId != null">
				#{fitTaskId},
			</if>
			<if test="unitTaskTime != null">
				#{unitTaskTime},
			</if>
			<if test="cost != null">
				#{cost},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.chaoxuan.zeus.model.FitTaskWorker">
		<!-- @mbggenerated -->
		update t_fit_task_worker
		<set>
			<if test="quotaWorkerVersionId != null">
				quota_worker_version_id = #{quotaWorkerVersionId},
			</if>
			<if test="fitTaskId != null">
				fit_task_id = #{fitTaskId},
			</if>
			<if test="unitTaskTime != null">
				unit_task_time = #{unitTaskTime},
			</if>
			<if test="cost != null">
				cost = #{cost},
			</if>
		</set>
		where id = #{id}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.chaoxuan.zeus.model.FitTaskWorker">
		<!-- @mbggenerated -->
		update t_fit_task_worker
		set quota_worker_version_id = #{quotaWorkerVersionId},
		fit_task_id = #{fitTaskId},
		unit_task_time = #{unitTaskTime},
		cost = #{cost}
		where id = #{id}
	</update>
	
	<insert id="insertBatch" parameterType="java.util.List">
		insert into t_fit_task_worker (quota_worker_version_id, fit_task_id, unit_task_time, cost)
		values
		<foreach collection="list" item="fitTaskWorker" separator=",">
			(#{fitTaskWorker.quotaWorkerVersionId}, #{fitTaskWorker.fitTaskId}, #{fitTaskWorker.unitTaskTime}, #{fitTaskWorker.cost})
		</foreach>
	</insert>
	
	<select id="findByMap" parameterType="java.util.Map" resultMap="findMap">
		select
			t1.*,
			t2.version,
			t2.unit_price,
			t2.area,
			t3.category_id,
			t3.category_name,
			t3.unit,
			t3.title
		from
			t_fit_task_worker t1
		join
			t_quota_worker_version t2
		on 
		 t1.quota_worker_version_id = t2.id
		join
			t_quota_worker t3
		on
			t2.quota_worker_id = t3.id
		<where>
			<if test="fitTaskId != null">
				and t1.fit_task_id = #{fitTaskId}
			</if>
		</where>
	</select>
	<resultMap type="org.chaoxuan.zeus.model.FitTaskWorker" id="findMap">
		<id column="quota_worker_version_id" property="id" />
		<result column="fit_task_id" property="fitTaskId" />
		<result column="unit_task_time" property="unitTaskTime" />
		<result column="cost" property="cost" />
		<result column="version" property="version"/>
		<result column="unit_price" property="unitPrice"/>
		<result column="area" property="area"/>
		<result column="category_id" property="categoryId"/>
		<result column="category_name" property="categoryName"/>
		<result column="unit" property="unit"/>
		<result column="title" property="title"/>
	</resultMap>
	
	<delete id="deleteByMap" parameterType="java.util.Map">
		delete from t_fit_task_worker
		<where>
			<if test="fitTaskId != null">
				and fit_task_id = #{fitTaskId}
			</if>
			<if test="quotaWorkerVersionIds != null">
				<foreach collection="quotaWorkerVersionIds" item="item" open="and quota_worker_version_id in(" close=")" separator=",">
					#{item}
				</foreach>
			</if>
		</where>
	</delete>
	
	<select id="findByFitTaskId" parameterType="java.lang.Integer" resultMap="findByFitTaskIdMap">
		select
			t1.*,
			t2.version,
			t2.unit_price,
			t2.area,
			t3.category_id,
			t3.category_name,
			t3.unit,
			t3.title
		from
			t_fit_task_worker t1
		join
			t_quota_worker_version t2
		on 
		 t1.quota_worker_version_id = t2.id
		join
			t_quota_worker t3
		on
			t2.quota_worker_id = t3.id
		where
			t1.fit_task_id = #{fitTaskId}
	</select>
	<resultMap type="org.chaoxuan.zeus.model.FitTaskWorker" id="findByFitTaskIdMap" extends="BaseResultMap">
		<result column="version" property="version"/>
		<result column="unit_price" property="unitPrice"/>
		<result column="area" property="area"/>
		<result column="category_id" property="categoryId"/>
		<result column="category_name" property="categoryName"/>
		<result column="unit" property="unit"/>
		<result column="title" property="title"/>
	</resultMap>
</mapper>